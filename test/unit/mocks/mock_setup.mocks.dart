// Mocks generated by Mockito 5.4.5 from annotations
// in projects/test/unit/mocks/mock_setup.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i18;
import 'dart:ui' as _i2;

import 'package:audioplayers/audioplayers.dart' as _i3;
import 'package:flutter/material.dart' as _i16;
import 'package:flutter/services.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:projects/features/bluetooth/platform/bluetooth_platform.dart'
    as _i14;
import 'package:projects/features/bluetooth/providers/bluetooth_provider.dart'
    as _i12;
import 'package:projects/features/presets/models/preset.dart' as _i7;
import 'package:projects/features/presets/providers/preset_provider.dart'
    as _i8;
import 'package:projects/features/presets/repositories/preset_repository.dart'
    as _i6;
import 'package:projects/features/settings/providers/language_provider.dart'
    as _i17;
import 'package:projects/features/settings/providers/theme_provider.dart'
    as _i15;
import 'package:projects/features/sound_test/models/sound_test.dart' as _i11;
import 'package:projects/features/sound_test/providers/sound_test_provider.dart'
    as _i9;
import 'package:projects/features/sound_test/repositories/sound_test_repository.dart'
    as _i10;
import 'package:shared_preferences/shared_preferences.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAudioCache_1 extends _i1.SmartFake implements _i3.AudioCache {
  _FakeAudioCache_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompleter_2<T> extends _i1.SmartFake implements _i4.Completer<T> {
  _FakeCompleter_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMethodCodec_3 extends _i1.SmartFake implements _i5.MethodCodec {
  _FakeMethodCodec_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBinaryMessenger_4 extends _i1.SmartFake
    implements _i5.BinaryMessenger {
  _FakeBinaryMessenger_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PresetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPresetRepository extends _i1.Mock implements _i6.PresetRepository {
  MockPresetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, _i7.Preset>> getAllPresets() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPresets, []),
            returnValue: _i4.Future<Map<String, _i7.Preset>>.value(
              <String, _i7.Preset>{},
            ),
          )
          as _i4.Future<Map<String, _i7.Preset>>);

  @override
  _i4.Future<void> saveAllPresets(Map<String, _i7.Preset>? presets) =>
      (super.noSuchMethod(
            Invocation.method(#saveAllPresets, [presets]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addPreset(_i7.Preset? preset) =>
      (super.noSuchMethod(
            Invocation.method(#addPreset, [preset]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePreset(_i7.Preset? preset) =>
      (super.noSuchMethod(
            Invocation.method(#updatePreset, [preset]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePreset(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePreset, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PresetProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPresetProvider extends _i1.Mock implements _i8.PresetProvider {
  MockPresetProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i7.Preset> get presets =>
      (super.noSuchMethod(
            Invocation.getter(#presets),
            returnValue: <String, _i7.Preset>{},
          )
          as Map<String, _i7.Preset>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  Map<String, bool> get dropdownStates =>
      (super.noSuchMethod(
            Invocation.getter(#dropdownStates),
            returnValue: <String, bool>{},
          )
          as Map<String, bool>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchPresets() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPresets, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createPreset(_i7.Preset? preset) =>
      (super.noSuchMethod(
            Invocation.method(#createPreset, [preset]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePreset(_i7.Preset? preset) =>
      (super.noSuchMethod(
            Invocation.method(#updatePreset, [preset]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePreset(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePreset, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setActivePreset(String? id) => super.noSuchMethod(
    Invocation.method(#setActivePreset, [id]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<bool> sendActivePresetToDevice() =>
      (super.noSuchMethod(
            Invocation.method(#sendActivePresetToDevice, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> sendCombinedDataToDevice(
    _i9.SoundTestProvider? soundTestProvider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendCombinedDataToDevice, [soundTestProvider]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearActivePreset() => super.noSuchMethod(
    Invocation.method(#clearActivePreset, []),
    returnValueForMissingStub: null,
  );

  @override
  void toggleDropdown(String? id, [bool? isOpen]) => super.noSuchMethod(
    Invocation.method(#toggleDropdown, [id, isOpen]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Preset? getPresetById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getPresetById, [id]))
          as _i7.Preset?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> loadPresets() =>
      (super.noSuchMethod(
            Invocation.method(#loadPresets, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SoundTestRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundTestRepository extends _i1.Mock
    implements _i10.SoundTestRepository {
  MockSoundTestRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, _i11.SoundTest>> getAllSoundTests() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSoundTests, []),
            returnValue: _i4.Future<Map<String, _i11.SoundTest>>.value(
              <String, _i11.SoundTest>{},
            ),
          )
          as _i4.Future<Map<String, _i11.SoundTest>>);

  @override
  _i4.Future<void> saveAllSoundTests(Map<String, _i11.SoundTest>? soundTests) =>
      (super.noSuchMethod(
            Invocation.method(#saveAllSoundTests, [soundTests]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addSoundTest(_i11.SoundTest? soundTest) =>
      (super.noSuchMethod(
            Invocation.method(#addSoundTest, [soundTest]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSoundTest(_i11.SoundTest? soundTest) =>
      (super.noSuchMethod(
            Invocation.method(#updateSoundTest, [soundTest]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSoundTest(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSoundTest, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SoundTestProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundTestProvider extends _i1.Mock implements _i9.SoundTestProvider {
  MockSoundTestProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i11.SoundTest> get soundTests =>
      (super.noSuchMethod(
            Invocation.getter(#soundTests),
            returnValue: <String, _i11.SoundTest>{},
          )
          as Map<String, _i11.SoundTest>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> fetchSoundTests() =>
      (super.noSuchMethod(
            Invocation.method(#fetchSoundTests, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createSoundTest(_i11.SoundTest? soundTest) =>
      (super.noSuchMethod(
            Invocation.method(#createSoundTest, [soundTest]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSoundTest(_i11.SoundTest? soundTest) =>
      (super.noSuchMethod(
            Invocation.method(#updateSoundTest, [soundTest]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resetSoundTest(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#resetSoundTest, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setActiveSoundTest(String? id) => super.noSuchMethod(
    Invocation.method(#setActiveSoundTest, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void clearActiveSoundTest() => super.noSuchMethod(
    Invocation.method(#clearActiveSoundTest, []),
    returnValueForMissingStub: null,
  );

  @override
  _i11.SoundTest? getSoundTestById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getSoundTestById, [id]))
          as _i11.SoundTest?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [BluetoothProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothProvider extends _i1.Mock implements _i12.BluetoothProvider {
  MockBluetoothProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDeviceConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isDeviceConnected),
            returnValue: false,
          )
          as bool);

  @override
  bool get isBluetoothEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isBluetoothEnabled),
            returnValue: false,
          )
          as bool);

  @override
  String get connectedDeviceName =>
      (super.noSuchMethod(
            Invocation.getter(#connectedDeviceName),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#connectedDeviceName),
            ),
          )
          as String);

  @override
  bool get isScanning =>
      (super.noSuchMethod(Invocation.getter(#isScanning), returnValue: false)
          as bool);

  @override
  List<_i14.BluetoothDevice> get scanResults =>
      (super.noSuchMethod(
            Invocation.getter(#scanResults),
            returnValue: <_i14.BluetoothDevice>[],
          )
          as List<_i14.BluetoothDevice>);

  @override
  _i14.BluetoothAudioType get audioType =>
      (super.noSuchMethod(
            Invocation.getter(#audioType),
            returnValue: _i14.BluetoothAudioType.none,
          )
          as _i14.BluetoothAudioType);

  @override
  bool get isUsingLEAudio =>
      (super.noSuchMethod(
            Invocation.getter(#isUsingLEAudio),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> saveConnectionState() =>
      (super.noSuchMethod(
            Invocation.method(#saveConnectionState, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadConnectionState() =>
      (super.noSuchMethod(
            Invocation.method(#loadConnectionState, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> refreshBatteryLevel() =>
      (super.noSuchMethod(
            Invocation.method(#refreshBatteryLevel, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateConnectionFromDevice(
    _i14.BluetoothDevice? device,
    _i14.BluetoothAudioType? audioType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateConnectionFromDevice, [device, audioType]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> forceAudioRouting() =>
      (super.noSuchMethod(
            Invocation.method(#forceAudioRouting, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setBypassMode(bool? bypass) => super.noSuchMethod(
    Invocation.method(#setBypassMode, [bypass]),
    returnValueForMissingStub: null,
  );

  @override
  void setBypassBluetoothCheck(bool? bypass) => super.noSuchMethod(
    Invocation.method(#setBypassBluetoothCheck, [bypass]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> startScan() =>
      (super.noSuchMethod(
            Invocation.method(#startScan, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopScan() =>
      (super.noSuchMethod(
            Invocation.method(#stopScan, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> checkBluetoothConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkBluetoothConnection, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> registerDevice(_i14.BluetoothDevice? device) =>
      (super.noSuchMethod(
            Invocation.method(#registerDevice, [device]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> connectToDevice(_i14.BluetoothDevice? device) =>
      (super.noSuchMethod(
            Invocation.method(#connectToDevice, [device]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> disconnectDevice() =>
      (super.noSuchMethod(
            Invocation.method(#disconnectDevice, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deregisterDevice() =>
      (super.noSuchMethod(
            Invocation.method(#deregisterDevice, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> connectViaSystemSettings() =>
      (super.noSuchMethod(
            Invocation.method(#connectViaSystemSettings, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> reconnectDevice() =>
      (super.noSuchMethod(
            Invocation.method(#reconnectDevice, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> verifyAudioConnection() =>
      (super.noSuchMethod(
            Invocation.method(#verifyAudioConnection, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i15.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkMode =>
      (super.noSuchMethod(Invocation.getter(#isDarkMode), returnValue: false)
          as bool);

  @override
  _i16.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i16.ThemeMode.system,
          )
          as _i16.ThemeMode);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> toggleTheme() =>
      (super.noSuchMethod(
            Invocation.method(#toggleTheme, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setTheme(bool? isDarkMode) =>
      (super.noSuchMethod(
            Invocation.method(#setTheme, [isDarkMode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LanguageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageProvider extends _i1.Mock implements _i17.LanguageProvider {
  MockLanguageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get currentLocale =>
      (super.noSuchMethod(
            Invocation.getter(#currentLocale),
            returnValue: _FakeLocale_0(this, Invocation.getter(#currentLocale)),
          )
          as _i2.Locale);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#loadLanguage, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [languageCode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  String getLanguageName() =>
      (super.noSuchMethod(
            Invocation.method(#getLanguageName, []),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.method(#getLanguageName, []),
            ),
          )
          as String);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i3.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AudioCache get audioCache =>
      (super.noSuchMethod(
            Invocation.getter(#audioCache),
            returnValue: _FakeAudioCache_1(
              this,
              Invocation.getter(#audioCache),
            ),
          )
          as _i3.AudioCache);

  @override
  set audioCache(_i3.AudioCache? _audioCache) => super.noSuchMethod(
    Invocation.setter(#audioCache, _audioCache),
    returnValueForMissingStub: null,
  );

  @override
  String get playerId =>
      (super.noSuchMethod(
            Invocation.getter(#playerId),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#playerId),
            ),
          )
          as String);

  @override
  _i3.PlayerState get desiredState =>
      (super.noSuchMethod(
            Invocation.getter(#desiredState),
            returnValue: _i3.PlayerState.stopped,
          )
          as _i3.PlayerState);

  @override
  set desiredState(_i3.PlayerState? _desiredState) => super.noSuchMethod(
    Invocation.setter(#desiredState, _desiredState),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Completer<void> get creatingCompleter =>
      (super.noSuchMethod(
            Invocation.getter(#creatingCompleter),
            returnValue: _FakeCompleter_2<void>(
              this,
              Invocation.getter(#creatingCompleter),
            ),
          )
          as _i4.Completer<void>);

  @override
  double get volume =>
      (super.noSuchMethod(Invocation.getter(#volume), returnValue: 0.0)
          as double);

  @override
  double get balance =>
      (super.noSuchMethod(Invocation.getter(#balance), returnValue: 0.0)
          as double);

  @override
  double get playbackRate =>
      (super.noSuchMethod(Invocation.getter(#playbackRate), returnValue: 0.0)
          as double);

  @override
  _i3.PlayerMode get mode =>
      (super.noSuchMethod(
            Invocation.getter(#mode),
            returnValue: _i3.PlayerMode.mediaPlayer,
          )
          as _i3.PlayerMode);

  @override
  _i3.ReleaseMode get releaseMode =>
      (super.noSuchMethod(
            Invocation.getter(#releaseMode),
            returnValue: _i3.ReleaseMode.release,
          )
          as _i3.ReleaseMode);

  @override
  _i3.PlayerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i3.PlayerState.stopped,
          )
          as _i3.PlayerState);

  @override
  set state(_i3.PlayerState? state) => super.noSuchMethod(
    Invocation.setter(#state, state),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<_i3.AudioEvent> get eventStream =>
      (super.noSuchMethod(
            Invocation.getter(#eventStream),
            returnValue: _i4.Stream<_i3.AudioEvent>.empty(),
          )
          as _i4.Stream<_i3.AudioEvent>);

  @override
  _i4.Stream<_i3.PlayerState> get onPlayerStateChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onPlayerStateChanged),
            returnValue: _i4.Stream<_i3.PlayerState>.empty(),
          )
          as _i4.Stream<_i3.PlayerState>);

  @override
  _i4.Stream<Duration> get onPositionChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onPositionChanged),
            returnValue: _i4.Stream<Duration>.empty(),
          )
          as _i4.Stream<Duration>);

  @override
  _i4.Stream<Duration> get onDurationChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onDurationChanged),
            returnValue: _i4.Stream<Duration>.empty(),
          )
          as _i4.Stream<Duration>);

  @override
  _i4.Stream<void> get onPlayerComplete =>
      (super.noSuchMethod(
            Invocation.getter(#onPlayerComplete),
            returnValue: _i4.Stream<void>.empty(),
          )
          as _i4.Stream<void>);

  @override
  _i4.Stream<void> get onSeekComplete =>
      (super.noSuchMethod(
            Invocation.getter(#onSeekComplete),
            returnValue: _i4.Stream<void>.empty(),
          )
          as _i4.Stream<void>);

  @override
  _i4.Stream<String> get onLog =>
      (super.noSuchMethod(
            Invocation.getter(#onLog),
            returnValue: _i4.Stream<String>.empty(),
          )
          as _i4.Stream<String>);

  @override
  set positionUpdater(_i3.PositionUpdater? positionUpdater) =>
      super.noSuchMethod(
        Invocation.setter(#positionUpdater, positionUpdater),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> play(
    _i3.Source? source, {
    double? volume,
    double? balance,
    _i3.AudioContext? ctx,
    Duration? position,
    _i3.PlayerMode? mode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #play,
              [source],
              {
                #volume: volume,
                #balance: balance,
                #ctx: ctx,
                #position: position,
                #mode: mode,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setAudioContext(_i3.AudioContext? ctx) =>
      (super.noSuchMethod(
            Invocation.method(#setAudioContext, [ctx]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setPlayerMode(_i3.PlayerMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setPlayerMode, [mode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resume() =>
      (super.noSuchMethod(
            Invocation.method(#resume, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> release() =>
      (super.noSuchMethod(
            Invocation.method(#release, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> seek(Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seek, [position]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setBalance(double? balance) =>
      (super.noSuchMethod(
            Invocation.method(#setBalance, [balance]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setVolume(double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [volume]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setReleaseMode(_i3.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(
            Invocation.method(#setReleaseMode, [releaseMode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setPlaybackRate(double? playbackRate) =>
      (super.noSuchMethod(
            Invocation.method(#setPlaybackRate, [playbackRate]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSource(_i3.Source? source) =>
      (super.noSuchMethod(
            Invocation.method(#setSource, [source]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceUrl(String? url, {String? mimeType}) =>
      (super.noSuchMethod(
            Invocation.method(#setSourceUrl, [url], {#mimeType: mimeType}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceDeviceFile(String? path, {String? mimeType}) =>
      (super.noSuchMethod(
            Invocation.method(
              #setSourceDeviceFile,
              [path],
              {#mimeType: mimeType},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceAsset(String? path, {String? mimeType}) =>
      (super.noSuchMethod(
            Invocation.method(#setSourceAsset, [path], {#mimeType: mimeType}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSourceBytes(_i18.Uint8List? bytes, {String? mimeType}) =>
      (super.noSuchMethod(
            Invocation.method(#setSourceBytes, [bytes], {#mimeType: mimeType}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Duration?> getDuration() =>
      (super.noSuchMethod(
            Invocation.method(#getDuration, []),
            returnValue: _i4.Future<Duration?>.value(),
          )
          as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> getCurrentPosition() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, []),
            returnValue: _i4.Future<Duration?>.value(),
          )
          as _i4.Future<Duration?>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i19.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);

  @override
  _i4.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i5.MethodChannel {
  MockMethodChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i5.MethodCodec get codec =>
      (super.noSuchMethod(
            Invocation.getter(#codec),
            returnValue: _FakeMethodCodec_3(this, Invocation.getter(#codec)),
          )
          as _i5.MethodCodec);

  @override
  _i5.BinaryMessenger get binaryMessenger =>
      (super.noSuchMethod(
            Invocation.getter(#binaryMessenger),
            returnValue: _FakeBinaryMessenger_4(
              this,
              Invocation.getter(#binaryMessenger),
            ),
          )
          as _i5.BinaryMessenger);

  @override
  _i4.Future<T?> invokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#invokeMethod, [method, arguments]),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#invokeListMethod, [method, arguments]),
            returnValue: _i4.Future<List<T>?>.value(),
          )
          as _i4.Future<List<T>?>);

  @override
  _i4.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#invokeMapMethod, [method, arguments]),
            returnValue: _i4.Future<Map<K, V>?>.value(),
          )
          as _i4.Future<Map<K, V>?>);

  @override
  void setMethodCallHandler(
    _i4.Future<dynamic> Function(_i5.MethodCall)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#setMethodCallHandler, [handler]),
    returnValueForMissingStub: null,
  );
}
